CSRF - Cross Site Request Forgery

-> you are logged-in to your bank's online platform; which creates a cookie and will be saved in your browser
-> you open a malicious website without logging out from the bank's application
-> other website may execute a bank transfer on your bank account without your knowledge using the cookie of bank in your system's browser
-- this is called as CSRF


How can you protect from CSRF?
1) Synchronizer Token Pattern
   - create a new token for each & every request
   - spring security enables this by default
   - to make any updates (POST, PUT, DELETE...), you need a CSRF token from the previous request


02.sb-security-csrf-app

record Product(Integer productId, String productName) {}

@RestController
public class ProductController {
 private Logger logger = LoggerFactory.getLogger(getClass());
 
 private static final List<Product> productsList = List.of(new Product(101, "Mobile"),
		 new Product(102, "Computer"), new Product(103, "Laptop") );
 
 @GetMapping("/products")
 public List<Product> getAllProducts(){  return productsList; }
 
 @GetMapping("/products/{pid}")
 public Product getProductByProductId(@PathVariable Integer pid) {
   Product product = productsList.stream().filter(prod -> prod.productId().equals(pid)).findFirst().orElse(null);
   return product; 
  }

  @PostMapping("/products/new")
  public void addNewProduct(@RequestBody Product product) {
   productsList.add(product);
   logger.info("saving new product {}", product);
 }
}


Authorization : Basic encoded username & password
GET http://localhost:8080/products - no issue
GET http://localhost:8080/products/101 - no issue
POST http://localhost:8080/products/new - failing error 401


CSRF for REST API

- by default Spring security creates a csrf token for all form based application
- to try - run previous app http://localhost:8080/welcome
   http://localhost:8080/logout   - view page source
   -- delete csrf field and submit and see the error - (Inspect page)
   -- try again /logout without deleting csrf node

- create a new controller
@RestController
public class CSRFRestController {
 @GetMapping("/csrf-token")
 public CsrfToken retrieveCsrfToken(HttpServletRequest request) {
   return (CsrfToken) request.getAttribute("_csrf");
 }
}
   
http://localhost:8080/csrf-token	 -- get the token

POST http://localhost:8080/products/new
New Header: X-CSRF-TOKEN  <csrf_token_value>			--- it works ----

 2: SameSite cookie (Set-Cookie: SameSite=Strict)  - another approach
  -- this cookie will be sent only to that specific site, it will not be send to any other site. to enable it, in  application.properties   (from Spring Boot 2.6_     server.servlet.session.cookie.same-site=strict  

   Depends on browser support

###---- Creating Spring Security Configuration to disable CSRF ----####

- SpringBootWebSecurityConfiguration (Spring Boot 2.x) class contains the default web security configuration
- WebSecurityConfiguration for Spring Boot 3.x



check in console for logs of "CSRF"

-- create a new SecurityConfiguration class

package com.wipro.boot.security.configs;

@Configuration
public class SecurityConfiguration {
 
 @Bean
 public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
   //--- default configuration ----
   http.authorizeHttpRequests(request -> request.anyRequest().authenticated());

   http.csrf(csrf ->csrf.disable());

   //http.sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS));
   
   http.httpBasic(Customizer.withDefaults());

   DefaultSecurityFilterChain filterChain = http.build();
   return filterChain; 
 }
}  

run the application - search for csrf in logs       **run post request without csrf header - and it works


2) Same-Site Cookie (SameSite-Strict=Strict)
in application.properties
 server.servlet.session.cookie.same-site=strict


default web security configuration details are available with 
 - SpringBootWebSecurityConfiguration / WebSecurityConfigurerAdapter (SB 2.x)
 - WebSecurityConfiguration (SB 3.2)


Working with CORS
-----------------
- Cross Origin Resource Sharing
- browsers do not allow AJAX calls to resources outside current origin
- let us imagine, that we have a full-stack application, and your frontend is making a REST API call to a different domain (a different URL), typically our browser will not allow that kind of calls

- Cross-Origin Resource Sharing (CORS) is a specification that allows you to configure which cross-domain requests are allowed

- there are 2 approaches that we can follow
 (1) Global Configuration  - applicable to all rest controllers/resources 

   Configure addCorsMappings callback method in WebMvcConfigurer      (SecurityConfiguration.java)

/*--- global configuration for CORS ----*/
@Bean
public WebMvcConfigurer corsConfigurer() {
  return new WebMvcConfigurer() {
    public void addCorsMappings(CorsRegistry registry) {
      registry.addMapping("/**")
              .allowedMethods("*")
              .allowedOrigins("http://localhost:3000");
  } 
 };
}


(2) Local Configuration
  @CrossOrigin - Allow from all origins
  @CrossOrigin(origins = "https://lcalhost:3000") - Allow from specific origin


=========================
Storing User Credentials
=========================

1) Default Credentials - which are generated by Spring Security 

2) We can configure credentials in application.properties/ application.yml file
   spring.security.user.name = sunil
   spring.security.user.password = sunil@123

3) We can configure user credentials with In-Memory of our application (In-Memory Credentials)

4) We can configure user credentials in Database (JDBC Authentication)

5) We can configure user credentials in LDAP Server (LDAP Authentication) - Lightweight Directory Access Protocol    Open protocol for directory services and authentication

03.sb-security-in-memory-auth

	//--- to configure multiple in-memory users  
	//UserDetailsService --> Core interface which loads user-specific data. 
	@Bean
	public UserDetailsService generateUsers() {
		UserDetails user1 =User.withUsername("admin")
					.password("{noop}12345")
					.roles("ADMIN")
					.build();
		
		var user2 =User.withUsername("sunil")
				.password("{noop}password123#")
				.roles("MANAGER")		//Create an ENUM for user roles
				.build();
		
		/*
		UserDetailsManager userDtlsMgr = new InMemoryUserDetailsManager();
		userDtlsMgr.createUser(user1);
		userDtlsMgr.createUser(user2);		
		return userDtlsMgr;
		*/
		
		UserDetailsService userDtlsService = new InMemoryUserDetailsManager(user1, user2);
		
		return userDtlsService;
	}




Storing user credentials using JDBC  - H2 Database				
04.sb-security-jdbc-auth
dependencies â€“ Spring Web, Security, Spring Data JDBC (spring-boot-starter-jdbc), H2 driver

spring.h2.console.enabled=true	
spring.datasource.url=jdbc:h2:mem:userDB		chrome://restart

http://localhost:8080/h2-console  - provide credentials - h2-console uses frames (view source) and spring security disables frames by default -  to enable it		in filterChain() method 
 http.csrf().disable();
 /*httpSecurity.csrf().ignoringAntMatchers("/h2-console/**");*/
 http.headers().frameOptions().sameOrigin();
open the source of org.springframework.security.core.userdetails.jdbc."JdbcDAOImpl" class and see the DEFAULT_USER_SCHEMA_DDL_LOCATION

add a new method in SecurityConfiguration class
@Bean
public DataSource dataSource() {
 return new EmbeddedDatabaseBuilder()
		.setType(EmbeddedDatabaseType.H2)
		.addScript(JdbcDaoImpl.DEFAULT_USER_SCHEMA_DDL_LOCATION)
		.build();
}

run the application - http://localhost:8080/h2-console




$$$---- Working with JdbcUserDetails - MySQL Database ---- ###
create database db_capgemini;
use db_cognizant;
create table users(username varchar(50), password varchar(200), enabled int);
create table authorities(username varchar(100), authority varchar(100));


  @Autowired
  private DataSource dataSource;

	@Bean
	public UserDetailsService generateUsers() {
		UserDetails user1 =User.withUsername("admin")
					.password("12345")   //.password("{noop}12345")
					.roles("ADMIN")
					.build();
		
		var user2 =User.withUsername("sunil")
				.password("password123#")
				.roles("MANAGER")
				.build();
		
		UserDetailsManager userDtlsMgr = new JdbcUserDetailsManager(dataSource);
		userDtlsMgr.createUser(user1);
		userDtlsMgr.createUser(user2);		
		return userDtlsMgr;
	} 


--- using PasswordEncoder ----
@Configuration
public class AppConfig {
	
	@Bean
	public BCryptPasswordEncoder getPasswordEncoder() {
		return new BCryptPasswordEncoder();
	}
}
---------SecurityConfiguration.java -----

 @Autowired
  private BCryptPasswordEncoder encoder;

	@Bean
	public UserDetailsService generateUsers() {
		UserDetails user1 =User.withUsername("admin")
					.password(encoder.encode("12345"))
					.roles("ADMIN")
					.build();
		
		var user2 =User.withUsername("sunil")
				.password(encoder.encode("password123#"))
				.roles("MANAGER")
				.build();
		
		UserDetailsManager userDtlsMgr = new JdbcUserDetailsManager(dataSource);
		userDtlsMgr.createUser(user1);
		userDtlsMgr.createUser(user2);		
		return userDtlsMgr;
	} 

----------------
	@Bean
	public UserDetailsService generateUsers() {
		UserDetails user1 =User.withUsername("admin")
					//.password(encoder.encode("12345"))
					.password("12345")
					.passwordEncoder(pwd -> encoder.encode(pwd))
					.roles("ADMIN", "MANAGER")
					.build();
		
		var user2 =User.withUsername("sunil")	
				//.password(encoder.encode("password123#"))
				.password("password123#")
				.passwordEncoder(pwd -> encoder.encode(pwd))				
				.roles("MANAGER")
				.build();
		
		UserDetailsManager userDtlsMgr = new JdbcUserDetailsManager(dataSource);
		userDtlsMgr.createUser(user1);
		userDtlsMgr.createUser(user2);		
		return userDtlsMgr;
	} 



Storing BCrypt Encoded Passwords

- PasswordEncoder - interface for performing one way transformation of a password


===================
05.sb-security-auth
===================

--------- BankRestController.java ----------

@RestController
public class BankRestController {
	@GetMapping("/home")
	public String homePage() {	return "Welcome to State Bank of India";	}
	
	@GetMapping("/balance")
	public String balancePage() {		return "This page shows customer's balance";	}	
	
	@GetMapping("/loan")
	public String loanPage() {	return "This page shows customer's loan details (if any)";	}	
	
	@GetMapping("/statement")
	public String statementPage() {  return "This page shows customer's bank statement";	}	
	
	@GetMapping("/care")
	public String customerCarePage() {	return "Contact State Bank of India";	}
}

----- application.properties -------
spring.security.user.name = sunil
spring.security.user.password = sunil@123

-- now to access any functionality we need to do login

==== Project Requirement ====

-- in a real-time scenario - do you think to secure all the methods in the application or only some methods to be secured? -- we need to secure only important methods

/home -- no need to secure; any one should be able to access
/balance -- this endpoint should be secured
/statement -- this endpoint should be secured
/loan -- this endpoint should be secured
/care - no need to secure -- open to everyone

here out of 5 functionality - we need to secure 3 methods (endpoints)   how to customize the security?

customize the requirement for  (above)

@Bean
public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {	
 http.authorizeHttpRequests(request -> request.requestMatchers("/home","/care").permitAll()
					      .anyRequest().authenticated());
 http.sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS));
 http.csrf().disable();
 http.headers().frameOptions().sameOrigin();
 http.httpBasic();
 return http.build();
} --- test it


=============================
06.sb-security-authorization
=============================
@RestController
public class BankRestController {
	@GetMapping("/home")
	public String homePage() {		return "Welcome to State Bank of India";	}	

	@GetMapping("/admin")
	public String adminPage() {		return "This page is for Administrators";	}	
	@GetMapping("/manager")
	public String managerPage() {		return "This page is for Managers";	}	
	
	@GetMapping("/clerk")
	public String clerkPage() {		return "This page is for Clerks";	}
	
	@GetMapping("/cashier")
	public String cashierPage() {		return "This page is for Cashiers";	}	
	
	@GetMapping("/customer")
	public String customerPage() {		return "This page is for Customers";	}	
	
	@GetMapping("/care")
	public String customerCarePage() {		return "Contact State Bank of India";	}
}


@Bean
public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {	
 http.authorizeHttpRequests(request -> request.requestMatchers("/home","/care").permitAll()
			.requestMatchers("/admin").hasRole("ADMIN")
			.requestMatchers("/manager").hasAnyRole("ADMIN","USER")
			.anyRequest()
			.authenticated());
  â€¦..
}



06.sb-security-oauth2
Dependencies:  Spring Web,  OAuth2 Client
Create Welcome Rest Controller for /welcome


Google for "Google Cloud"	cloud.google.com	> Go to Console		> 
Create or Select a New Project > New Project
> Select Project

Search for "API & Services"
	 	
> OAuth Consent Screen    User Type: External > Create	

App Information::	
Application: CTS	> ..... Save & Continue

> Create Credentials > OAuth2  > Create Credentials  - OAuth Client ID
Web App		Name: CTS App		URL: http://localhost:8080     Add Scopes:  email & profile
Redirect: http://localhost:8080/login/oauth2/code/google	> Create	Copy ID and Secret Key 


226961947300-ipe58tc4kv2l6drbo2l7cp030r68jtn7.apps.googleusercontent.com
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


in application.properties
spring.security.oauth2.client.registration.google.client-id=<client_id>
spring.security.oauth2.client.registration.google.client-secret=<client_secret>
spring.security.oauth2.client.registration.google.redirect-uri= http://localhost:8080/login/oauth2/code/
http://localhost:8080/login/oauth2/code/google
@Configuration
public class BasicSecurityConfiguration {
 @Bean
@Order(SecurityProperties.BASIC_AUTH_ORDER)
 public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {	
   http.authorizeHttpRequests(request -> request.anyRequest().authenticated());
   http.oauth2Login();	// http.oauth2Login(Customizer.withDefaults());	   
   return http.build(); 
}
@RestController
public class WelcomeRestController {	
	@GetMapping("/")
	public String welcomeMessage(Authentication authentication) {
		System.out.println(authentication);
		System.out.println(authentication.getPrincipal());
		return "Hello World";
	}
}

======================================================================================
JWT  jwt.io

-> JWT stands for JSON Web Token.

-> It is a token implementation which will be in the JSON format and designed to use for the web requests

-> JWT is most common and favorite token type that many systems use these days due to its features and advantages
Eg: while doing an online transfer of amount - OTP is required. We can consider OTP as a token

-> JWT Token can be used in both Authentication & Authorization scenario


JSON Web Tokens are an open, industry standard method for representing claims security between two parties. 
jwt.io allows you to decode, verify and generate JWT

JWT is the best secured way to communicate between the client and server and the advantages of using JWT is that it completely follows stateless authentication mechanism - it means all the user inputs or state is never saved in server memory or cookies.    
Why JWT? Traditional Approach

 

JWT contains username and  password in an encrypted manner with some other details

 
Sample JWT

A JWS - JSON Web Signature (the most common type of JWT) contains three parts separated by a dot ( . ). The first two parts (the "header" and "payload") are Base64-URL encoded JSON, and the third is a cryptographic signature

-> A JWT token has 3 parts which are separated by dot (.)
Sample JWT token

eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c

1) Header - represents header information which contains name of algorithm & type of token
2) Payload- claims information will be available here details)
   (registered claims / public claims / private claims)
3) Signature - encoded header + encoded payload + secret key

Decoded JWT
Header 
{
  "alg": "HS256",
  "typ": "JWT"
}
Refer: https://jwt.io/       https://jwt.io/introduction 
We can decode JWT Token using https://jwt.io/#debugger-io

alg â€“ algorithm    typ â€“ type of token    sub â€“ subject    iat â€“ Issued at

JWT Work Flow

Practicals -> Spring Boot Application with JWT Token

-> In our spring boot application we have 2 endpoints 
    1) /hello	    2) /token

---> /hello endpoint is token based secured endpoint; if token is valid then only /hello endpoint will be executed

---> /token endpoint is used for getting JWT token based on user credentials.  If credentials are valid then only token will be generated 

Note : 
username: admin
password: admin@123




New Project -> sb-security-jwt-app






logging.pattern.console= %green(%d{dd-MMM-yyyy HH:mm:ss.SSS}) %blue(%-5level) %red([%thread]) %yellow(%logger) %msg %n


https://www.bezkoder.com/websecurityconfigureradapter-deprecated-spring-boot/
https://www.codejava.net/frameworks/spring-boot/fix-websecurityconfigureradapter-deprecated
from boot 2.7.x

Reference: 
1) https://reflectoring.io/spring-security/
2) https://www.bezkoder.com/spring-boot-security-jwt/


@Configuration
public class SecurityConfig {
    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
		http.authorizeRequests()
			.antMatchers("/home","/care")
			.permitAll()
			.antMatchers("/balance","/loan","/statement")
			.authenticated()
			.and().formLogin()
			.and().httpBasic();
		
		return http.build();
	}	
}



@Configuration
public class BasicSecurityConfiguration {
 @Bean
 public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {	
   http.authorizeHttpRequests(request -> request.requestMatchers("/home","/care").permitAll()
	.anyRequest().authenticated());
   http.sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS));
   http.csrf().disable();
   http.headers().frameOptions().sameOrigin();
   http.httpBasic();
   return http.build();
}


