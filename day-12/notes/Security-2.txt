05.sb-security-authorization

@RestController
public class BankRestController {
	@GetMapping("/home")
	public String homePage() {		return "Welcome to State Bank of India";	}	

	@GetMapping("/admin")
	public String adminPage() {		return "This page is for Administrators";	}	
	@GetMapping("/manager")
	public String managerPage() {		return "This page is for Managers";	}	
	
	@GetMapping("/clerk")
	public String clerkPage() {		return "This page is for Clerks";	}
	
	@GetMapping("/cashier")
	public String cashierPage() {		return "This page is for Cashiers";	}	
	
	@GetMapping("/customer")
	public String customerPage() {		return "This page is for Customers";	}	
	
	@GetMapping("/care")
	public String customerCarePage() {		return "Contact State Bank of India";	}
}


@Bean
public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {	
 http.authorizeHttpRequests(request -> request.requestMatchers("/home","/care").permitAll()
			.requestMatchers("/admin").hasRole("ADMIN")
			.requestMatchers("/manager").hasAnyRole("ADMIN","USER")
			.anyRequest()
			.authenticated());
  …..
}




---- AppConfig.java-----
@Configuration
public class AppConfig {
	@Bean
	public PasswordEncoder getPasswordEncoder() {
		PasswordEncoder encoder = PasswordEncoderFactories.createDelegatingPasswordEncoder();
		return encoder;
	}
}



----- SecurityConfiguration.java ----
@Configuration
public class SecurityConfiguration {
	@Autowired
	private PasswordEncoder encoder;
	
	@Bean
	public UserDetailsService manageUsers(){
		UserDetails user1 =  User.withUsername("admin")
								 .password(encoder.encode("1234"))
								 .roles("ADMIN")
								 .build();
		
		UserDetails user2 =  User.builder()
						 		.username("sunil")
						 		.password(encoder.encode("1234"))	
						 		.roles("MANAGER")
						 		.build();	

		UserDetails user3 =  User.builder()
				 				.username("sanjay")
				 				.password(encoder.encode("1234"))	
				 				.roles("CLERK")
				 				.build();		
		
		UserDetailsManager users = new InMemoryUserDetailsManager(user1, user2, user3);
		
		System.out.println(user1.getPassword());
		
		return users;			
	}
	
	@Bean
	public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
		return http.authorizeHttpRequests(request -> request.requestMatchers("/home","/care")
															.permitAll()
															.requestMatchers("/admin").hasRole("ADMIN")
															//.requestMatchers("/admin/**").hasRole("ADMIN")
															.requestMatchers("/manager").hasAnyRole("ADMIN","MANAGER")
															//.requestMatchers("/manager").hasAnyAuthority("ADMIN","MANAGER")
															.requestMatchers("/clerk").hasAnyRole("ADMIN","MANAGER","CLERK")
															.anyRequest()
															.authenticated())
		
		.csrf(csrf -> csrf.disable())
		.httpBasic(Customizer.withDefaults())
		.build();
	}	
}



====== OAUth2 ===========
Open Authorization

OAuth2 is a standard designed to allow a website or application to access resources hosted by other web applications on behalf of a user. 

OAuth is an industry standard for Authentication and Authorization

OAuth 2.0 is an open standard protocol that allows users to grant third-party applications limited access to their resources on a different service, without sharing their credentials

It's widely used for secure delegated access, such as allowing a user to log in to an app using their Google account or granting a photo editing app access to their Google Photos

OAuth 2.0 is the industry-standard protocol for authorization.


1. Resource Owner  - You
2. Client Application - Quora
3. Resource Server - Gmail / Google (contains the resources that are being accessed)
4. Authorization Server - Google OAuth Server




07.sb-security-oauth

Dependencies:  Spring Web,  Spring Boot Dev Tools, OAuth2 Client, Spring security

Create Welcome Rest Controller for /welcome


Google for "Google Cloud"	cloud.google.com	> Sign In >   Console		> 

Create or Select a New Project > New Project

> Select Project

Search for "API & Services"
	 	
> OAuth Consent Screen    User Type: External > Create	

App Information::	
Application: CTS	> ..... Save & Continue

> Create Credentials / Create OAuth client > OAuth2  > Create Credentials  - OAuth Client ID

Web App		Name: CTS App		URL: http://localhost:8080     Add Scopes:  email & profile
Redirect: http://localhost:8080/login/oauth2/code/google	> Create	Copy ID and Secret Key 




in application.properties
spring.security.oauth2.client.registration.google.client-id=<client_id>
spring.security.oauth2.client.registration.google.client-secret=<client_secret>



@Configuration
public class SecurityConfiguration {
	
 @Bean
 public SecurityFilterChain filterChain(HttpSecurity httpSecurity) throws Exception{
   httpSecurity.authorizeHttpRequests(request -> request.anyRequest()												.authenticated());
   
   httpSecurity.oauth2Login(Customizer.withDefaults());  //Configures authentication support using an OAuth 2.0 and/or OpenID Connect 1.0Provider. 

   return httpSecurity.build();
 }





@RestController
public class WelcomeRestController {	
	@GetMapping("/")
	public String welcomeMessage(Authentication authentication) {
		System.out.println(authentication);
		System.out.println(authentication.getPrincipal());
		return "Hello World";
	}
}

======================================================================================
JWT  jwt.io

-> JWT stands for JSON Web Token.

-> It is a token implementation which will be in the JSON format and designed to use for the web requests

-> JWT is most common and favorite token type that many systems use these days due to its features and advantages
Eg: while doing an online transfer of amount - OTP is required. We can consider OTP as a token

-> JWT Token can be used in both Authentication & Authorization scenario


JSON Web Tokens are an open, industry standard method for representing claims security between two parties. 
jwt.io allows you to decode, verify and generate JWT

JWT is the best secured way to communicate between the client and server and the advantages of using JWT is that it completely follows stateless authentication mechanism - it means all the user inputs or state is never saved in server memory or cookies.    
Why JWT? Traditional Approach

 

JWT contains username and  password in an encrypted manner with some other details

 
Sample JWT

A JWS - JSON Web Signature (the most common type of JWT) contains three parts separated by a dot ( . ). The first two parts (the "header" and "payload") are Base64-URL encoded JSON, and the third is a cryptographic signature

-> A JWT token has 3 parts which are separated by dot (.)
Sample JWT token

eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c

1) Header - represents header information which contains name of algorithm & type of token
2) Payload- claims information will be available here details)
   (registered claims / public claims / private claims)
3) Signature - encoded header + encoded payload + secret key

Decoded JWT
Header 
{
  "alg": "HS256",
  "typ": "JWT"
}
Refer: https://jwt.io/       https://jwt.io/introduction 
We can decode JWT Token using https://jwt.io/#debugger-io

alg – algorithm    typ – type of token    sub – subject    iat – Issued at

JWT Work Flow

Practicals -> Spring Boot Application with JWT Token

-> In our spring boot application we have 2 endpoints 
    1) /hello	    2) /token

---> /hello endpoint is token based secured endpoint; if token is valid then only /hello endpoint will be executed

---> /token endpoint is used for getting JWT token based on user credentials.  If credentials are valid then only token will be generated 

Note : 
username: admin
password: admin@123




New Project -> sb-security-jwt-app


logging.pattern.console= %green(%d{dd-MMM-yyyy HH:mm:ss.SSS}) %blue(%-5level) %red([%thread]) %yellow(%logger) %msg %n