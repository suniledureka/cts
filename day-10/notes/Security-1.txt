Securing Spring Boot Application with Spring Security
=====================================================

-> Spring Boot is a mandatory requirement for every Java Developer

Common Interview Questions on Spring Boot

-> Security	- How did you implement security to your web application so that there won't be any security breaches in your application?

-> Password	- How are you storing passwords in your application?  Users normally pass the email id and password.  How to store passwords, validate them, encode, decode them using Industry standard encryption algorithms

Do you think that the password like admin@123 will be stored as it is in the DB?
We need to perform some operations before storing the password in the DB

-> Users and Roles	- How to maintain the user level security based on their roles and grants associated with them?

Can every user access every page/functionality of your application or based on the roles the users will access the functionality - based on the roles

How can we perform role based security?

-> Multiple Logins	- How can I implement a mechanism where the user will login once only and start using my application?	With FB credentials we can login to FB from multiple devices	Gmail Credentials, Amazon Prime etc

-> Fine Grained Security - How can I implement security at each level of my application using authorization rule?

-> CSRF & CORS
CSRF - Cross-Site Request Forgery      
CORS â€“ Cross Origin Resource Sharing is an HTTP-header based mechanism that allows a server to indicate any origins (domain, scheme, or port) other than its own from which a browser should permit loading resources

What is CSRF attacks and CORS restrictions? How to overcome them?

-> JWT & OAuth2	What is JWT and OAuth2? How can I protect my application using them?

-> Preventing Attacks	- How to prevent security attacks like Brute force, Stealing of Data, session fixation

A brute force attack is a hacking method that uses trial and error to crack passwords, login credentials, and encryption keys. It is a simple yet reliable tactic for gaining unauthorized access to individual accounts and organizations' systems and networks.

Every developer should know the security techniques that we need to implement in our application


What is Security?
----------------
Security is for protecting your data and business logic inside our application
Our company data - employee details, projects details

ECommerce Site - Product Details, Reseller Details, Customer Details, Order Details etc

Security is a Non Functional Requirement - No client will specifically asks that he need security

Security From Development Phase - Security should be considered from development phase itself along with business logic (not at the last)

Different Types of Security - Security for an application will be implemented in different ways like using firewalls, HTTPS, SSL, Authentication, Authorization etc

Authentication Vs Authorization
-------------------------------
Basic thing of Security is Authentication & Authorization

Authentication -> Verifies who you are: college student, company employee
Authorization -> decides whether you have permission to access a resource:
User XYZ can only read data	 User ABC can read and update data

#1 in authentication - the identity of users are checked for providing the access to the system (implementing login functionality).  in authorization - user's authorities are checked for accessing the resources

#2 authentication done before authorization           		
   authorization always happens after authentication

#3 authentication usually needs user's login details     	
   authorization needs user's privileges or roles

#4 if authentication fails usually we will get 401 error response
   if authorization fails usually we will get 403 error response

for example - as a bank employee/ customer - in order to perform actions in the application we need to prove our identity
in authorization - once logged into the application - my roles, authorities will decide what kind of actions I can do

as an example - you want to travel in a flight - your Passport or Voter ID card is the Authentication and your ticket is authorization


How does Spring MVC Work?
DispatcherServlet acts as the front controller
  -> Intercepts all requests
  -> Routes to the Right Controller
   Request ---> DispatcherServlet ----> Controller(s)


How does Spring Security Work?

Spring security intercepts all requests
Spring security executes a series of filters - also called Spring Security Filter Chain
   Request ---> Spring Security ---> DispatcherServlet ----> Controller(s)
  

Filters provide these features:
    - Authentication: Is it a valid user? (Ex: BasicAuthenticationFilter)
    - Authorization: Does the user have right access?(Ex: AuthorizationFilter)

   Other Features:
    - Cross-Origin Resource Sharing (CORS) - CorsFilter
        Should you allow AJAX calls from other domains?
        Ex: if you are building a fullstack application, you have the frontend deployed to one domain like React and the backend rest api deployed to another domain. the backend REST API should allow calls from the frontend  application which is running in the browser - this can be configured usingCORS

    - Cross Site Request Forgery (CSRF) - CsrfFilter
       - typically a user session is created for you once you login to a site/web application, and a user session is typically identified by using a cookie in the browser, if you don't logout from that site and you go to a malicious web site - this site can make use of the previous authentication that you have - the cookie which is present in the browser. this vulnerability is known as CSRF. when we add spring security - CSRF is automatically enabled for any update/ delete requests

	A malicious website making use of previous authentication on your website
	Default: CSRF protection enabled for update requests - POST, PUT etc..

Spring security provides a default Login Page, Logout Page
	LogoutFilter, DefaultLoginPageGeneratingFilter, DefaultLogoutPageGeneratingFilter
     Translating exceptions into proper Http Responses (ExceptionTranslationFilter)

Order of filters is important (typical order is)
  1: Basic Check Filters - CORS, CSRF, ..
  2: Authentication Filters - do they have the correct credentials
  3: Authorization Filters - do they have the right access to perform the right action on the right resource


------- Practicals -----

01.sb-security-app

   WelcomeRestController
add spring security dependency	- User Name: user    Password from console

In Browser - Inspect > Network > All - /welcome?contine - Headers

- Used by most web applications
- Uses a Session Cookie    JSESSIONID: E2E693A57F6F7E4AC112A1BF4D40890A
- Spring security enables form based authentication by default
- Provides a default Login Page
- Provides a default Logout Page
- Provides a /logout URL  - http://localhost:8080/logout


To provide our own username and password - in application.properties
spring.security.user.name = sunil
spring.security.user.password = sunil@123


How does basic authentication work?

 Base 64 encoded username and password is sent as request header
  Authorization (header): Basic dXNlcjo1YmIzYmIxNi0yNTEwLTQxZjctYjEyNy0zZjU5NjgxM2NkOTg=

 DISADVANTAGE of Basic Authentication-> Easy Decoding
 -> Basic Auth Authorization Header:
     Does NOT contain authorization information (user access, roles,..)
     Does NOT have Expiry Date