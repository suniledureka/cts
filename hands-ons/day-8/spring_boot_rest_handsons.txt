Case-1:  Hello World RESTful Web Service 

Write a REST service application, that returns the text "Hello World!!" using Spring Boot Framework. 
Refer details below:

Method: GET
URL: /hello
Controller: com.company.rest.controller.HelloController
Method Signature: public String sayHello()
Method Implementation: return hard coded string "Hello World!!"
Sample Request: http://localhost:8083/hello
Sample Response: Hello World!! 

IMPORTANT NOTE: Don't forget to include start and end log in the sayHello() method.

Try the URL http://localhost:8083/hello in both chrome browser and postman.

-------------------------------------------------------------------------------
Case-2: REST - Country Web Service 

Write a REST service that returns India country details 

create a Model class for Country with countryCode, countryName
create a DAO class with a List of countries

URL: /country
Controller: com.company.rest.controller.CountryController
Method Annotation: @RequestMapping
Method Name: getCountryIndia()
//Method Implementation: Load India bean from spring xml configuration and return
Sample Request: http://localhost:8083/country
Sample Response:
{
  "code": "IN",
  "name": "India"
}

-----------------------------------------------------------------------------
Case-3: REST - Get all countries 

Write a REST service that returns all the countries.

Controller: com.company.rest.controller.CountryController
Method Annotation: @GetMapping("/countries")
Method Name: getAllCountries()

Sample Request: http://localhost:8083/countries
Sample Response:
[
  { "code": "IN", "name": "India"},
  { "code": "US", "name": "United States"},
  { "code": "JP", "name": "Japan"},
  { "code": "DE", "name": "Germany"}
]

--------------------------------------------------------------------
Case-4: REST - Get country based on country code 

Write a REST service that returns a specific country based on country code. 
The country code should be case insensitive.

Controller: com.company.rest.controller.CountryController
Method Annotation: @GetMapping("/countries/{code}")
Method Name: getCountry(String code)
Method Implemetation: Invoke countryService.getCountry(code) 
Service Method: com.company.rest.service.CountryService.getCountry(String code)

Service Method Implementation:
- Get the country code using @PathVariable
- Get country list from DAO/country.xml
- Iterate through the country list
- Make a case insensitive matching of country code and return the country.
- Lambda expression can also be used instead of iterating the country list
Sample Request: http://localhost:8083/country/in

Sample Response:
{
  "code": "IN",
  "name": "India"
}

------------------------------------------------------------------
Case-5  REST - Get country exceptional scenario 

In the previous hands on where we implemented getting country based on country code, what happens if the country code provided in the URL is not present.

- Create a new exception class com.company.rest.service.exception.CountryNotFoundException
- Include below specified annotation at the class level in CountryNotFoundException class
@ResponseStatus(value = HttpStatus.NOT_FOUND, reason = "Country not found")
- In CountryService.getCountry() method include the logic to throw CountryNotFoundException if the country code does not exists in the list.
- In CountryController.getCountry() method include throws clause in method signature. This will respond to the caller of the web service with appropriate error message in JSON format.
- Test the service in postman
Sample Request: http://localhost:8083/country/az

Sample Response:
{
  "timestamp": "2019-10-02T03:27:54.521+0000",
  "status": 404,
  "error": "Not Found",
  "message": "Country not found",
  "path": "/country/az"
}

-------------------------------------------------------------------------
Case-6: MockMVC - Test get country service 

Using MockMVC test the get country service.

Create a test cases to test the following aspects:
- Test is the CountryController is loaded
- Invoke the service to get country and check in the response if it contains code as "IN" and name as "India"

Refer steps below to implement
- Test loading CountryController
- Include CountryController instance variable in SpringLearnApplicationTests.java and autowire the instance variable using annotation.
    @Autowired
    private CountryControllercountryController;
 
- Include assertion in contextLoads() method to check if controller is loaded.
    @Test
    public void contextLoads() {
        assertNotNull(countryController);
    }
 
- Run the JUnit testing by right clicking on SpringLearnApplicationTests.java > Run As > JUnit Test
- This test can also be executed in command line using the following maven command in the root folder of the project. (Note: don't forget to include proxy details in the below command)
mvn clean test

- Check if the log in the constructor of CountryControlleris called.
- Test service to get the country
- Include below imports

import static org.junit.Assert.assertNotNull;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;

import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
importorg.springframework.test.web.servlet.MockMvc;
importorg.springframework.test.web.servlet.ResultActions;
 
- Include @AutoConfigureMockMvc annotation for SpringLearnApplicationTests.java
- Autowire mock mvc in SpringLearnApplicationTests.java
    @Autowired
    private MockMvcmvc;
 
- Include a new test method in SpringLearnApplicationTests.java
    @Test
    public void testGetCountry() throws Exception {

    }
 
- Include the following line in the new method that calls the service method. Execute the JUnit test and check if the test case is successful.
    @Test
    public void testGetCountry() throws Exception {
        ResultActions actions = mvc.perform(get("/country"));
    }
 
- Include the following line to check if the HTTP Status is 200, which means the call is successful. Execute JUnit test and check if the test case is successful.
    @Test
    public void testGetCountry() throws Exception {
        ResultActions actions = mvc.perform(get("/country"));
        actions.andExpect(status().isOk());
    }
 
- Include the following line to check if the code is available in the reponse
    @Test
    public void getCountry() throws Exception {
        ResultActions actions = mvc.perform(get("/country"));
        actions.andExpect(status().isOk());
        actions.andExpect(jsonPath("$.code").exists());
    }
 
- Include the following line to check if the value of code is "IN"
    @Test
    public void getCountry() throws Exception {
        ResultActions actions = mvc.perform(get("/country"));
        actions.andExpect(status().isOk());
        actions.andExpect(jsonPath("$.code").exists());
        actions.andExpect(jsonPath("$.code").value("IN"));
    }
 
- Using above two steps include checks for "name" attribute and check if it's value is "India"
â€ƒ
MockMVC - Test get country service for exceptional scenario 

Include MockMVC test that checks if correct response is received when there is an error.

Refer steps below to implement
- Include a new test method testGetCountryException() in SpringLearnApplicationTests.java
- Validate the error response using status(). Refer code below.
        actions.andExpect(status().isBadRequest());
        actions.andExpect(status().reason("Country Not found"));

